#!/usr/bin/perl

use strict;
use warnings;
use v5.6.1;
use IO::Select;
use IO::Socket;
use Socket;

# Some initialization:

###############################################################################
# We're just gonna get this out of the way right now.
# These define all the server numerics.
#
# Note: Numeric 462 was originally ERR_ALREADYREGISTRED (not REGISTERED).
# Why this legacy typo has stayed in for so long is beyond me.
# I'm taking it out.
###############################################################################
my $RPL_WELCOME           = '001';
my $RPL_YOURHOST          = '002';
my $RPL_CREATED           = '003';
my $RPL_LUSERCLIENT       = 251;
my $RPL_LUSEROP           = 252;
my $RPL_LUSERUNKNOWN      = 253;
my $RPL_LUSERCHANNELS     = 254;
my $RPL_LUSERME           = 255;
my $RPL_LOCALUSERS        = 265;
my $RPL_GLOBALUSERS       = 266;
my $RPL_WHOISUSER         = 311;
my $RPL_WHOISSERVER       = 312;
my $RPL_ENDOFWHOIS        = 318;
my $RPL_MOTD              = 372;
my $RPL_MOTDSTART         = 375;
my $RPL_ENDOFMOTD         = 376;
my $ERR_NOSUCHNICK        = 401;
my $ERR_UNKNOWNCOMMAND    = 421;
my $ERR_NOMOTD            = 422;
my $ERR_NONICKNAMEGIVEN   = 431;
my $ERR_ERRONEUSNICKNAME  = 432;
my $ERR_NICKNAMEINUSE     = 433;
my $ERR_NOTREGISTERED     = 451;
my $ERR_NEEDMOREPARAMS    = 461;
my $ERR_ALREADYREGISTERED = 462;
###############################################################################

my %users;  # Hash containing all filehandles of clients and their info. Ex. $users{$filehandle}{nick}
my %local;  # Hash containing all local info for the server. Ex. $local{users}
my %global; # Hash containing all global info for the network. Ex. $global{users}
my %fhs;    # Hash containing nicks and their filehandles. Ex. $fhs{nick}
my @clients_to_disconnect; # Array containing a list of filehandles that have disconnected.

# Will be replaced to be read from a config file later.
$local{version}     = 'Veachian-0.12';
$local{network}     = 'V64net';
$local{server}      = 'G42.V64.net';
$local{server_desc} = 'The Veachian IRCd - Written entirely in the Perl programming language.';
$local{start_date}  =  get_date();
$local{motd_file}   = 'vircd.motd';
$local{port}        = 4242;
$local{debug}       = 0;
$local{read_size}   = 1_048_576;

$local{users} = 0;
$global{users} = 0;
$local{record_users} = 0;
$global{record_users} = 0;
$local{invisible_users} = 0;
$global{invisible_users} = 0;
$local{non_invisible_users} = 0;
$global{non_invisible_users} = 0;
$local{servers} = 0;
$global{servers} = 1;
$local{operators} = 0;
$global{operators} = 0;
$local{channels} = 0;
$global{channels} = 0;

print "Starting $local{version}......";

$local{listen} = IO::Socket::INET->new(LocalPort => $local{port},
                                       Listen    => 10,
                                       Proto     => 'tcp',
                                       Reuse     => 1)
or die "Unable to creating listening socket: $!\n";

$local{reader} = IO::Select->new();
$local{reader}->add($local{listen});
$local{sender} = IO::Select->new();
$local{sender}->add($local{listen});

print "Server running.\n";

while (1) {
    my @queues = IO::Select->select($local{reader}, $local{sender}, undef, 0.1);

    foreach my $fh (@{$queues[1]}) {
        my $write = syswrite($fh, $users{$fh}{recv_buf});
        if ($users{$fh}{nick} && $local{debug}) { print "Sending to $users{$fh}{hostname} ($users{$fh}{nick}): $users{$fh}{recv_buf}\n" }
        elsif ($local{debug}) { print "Sending to $users{$fh}{hostname}: $users{$fh}{recv_buf}\n" }
        if ($write) {
            $users{$fh}{recv_buf} = '';
            $local{sender}->remove($fh);
        }
        else { warn "Error sending data to $users{$fh}{nick}: $!\nData saved.\n" }
    }

    foreach my $fh (@{$queues[0]}) {
        if ($fh != $local{listen}) {
            my $sent_buf;
            my $read = sysread($fh, $sent_buf, $local{read_size});
            if ($read) {
                my @bufs = split(/\n/, $sent_buf);
                foreach my $args (@bufs) {
                    process_command($fh, $args);
                    if ($users{$fh}{nick} && $local{debug}) { print "Received from $users{$fh}{hostname} ($users{$fh}{nick}): $args\n" }
                    elsif ($local{debug}) { print "Received from $users{$fh}{hostname}: $args\n" }
                }
            }
            else { push @clients_to_disconnect, $fh }
            # If data can't be read, the client either disconnected or there was an error. Either way, get rid of their data.
        }
        else {
            my $fh = $local{listen}->accept;
            $local{reader}->add($fh);
            send_user_msg_serv($fh, 'NOTICE AUTH :*** Looking up your hostname...');
            if (look_up_host($fh)) { send_user_msg_serv($fh, "NOTICE AUTH :*** Hostname found: $users{$fh}{hostname}") }
            else { send_user_msg_serv($fh, "NOTICE AUTH :*** Hostname not resolved. Using IP instead: ($users{$fh}{hostname})") }
            $users{$fh}{connected} = 0;
        }
    }

    disconnect_dead_clients() if $clients_to_disconnect[0]; # Don't call disconnect_dead_clients if there are none.
}

# To prevent confusion on the subroutines that accept multi-word arguments:
# my ($fh, $output) = @_ works because even though the output may be
# multiple words, it is passed as one argument in a double-quoted string.

###########################################################################
# Subroutines to send data:
###########################################################################


# Sends data prefixed with the user's full address. Used for messages.
sub send_user_msg_addr {
    my ($fh, $output) = @_;
    my $message = ":$users{$fh}{nick}!$users{$fh}{username}\@$users{$fh}{hostname} ";
    $message .= "$output\n";
    $users{$fh}{recv_buf} .= $message;
    $local{sender}->add($fh);
}

# Sends data prefixed with the server name. Used for data that doesn't have a numeric, like server notices.
sub send_user_msg_serv {
    my ($fh, $output) = @_;
    my $message = ":$local{server} ";
    $message .= "$output\n";
    $users{$fh}{recv_buf} .= $message;
    $local{sender}->add($fh);
}

# Send exactly what we're given. Used for all other messages.
sub send_user_msg_raw {
    my ($fh, $output) = @_;
    my $message .= "$output\n";
    $users{$fh}{recv_buf} .= $message;
    $local{sender}->add($fh);
}

# Sends data prefixed with the server name and the supplied numeric. Used for server numerics.
sub send_user_msg_num {
    # The filehandle and numeric are shifted off so that any other arguments can be grabbed as necessary.
    my ($fh, $numeric) = ((shift), (shift));
    my $message;
    if ($users{$fh}{connected}) { $message = ":$local{server} $numeric $users{$fh}{nick} " }
    else { $message = ":$local{server} $numeric * " }

    if ($numeric == $RPL_WELCOME) {
        my ($nick, $username, $hostname) = @_;
        $message .= ":Welcome to the $local{network} IRC Network $nick!$username\@$hostname";
    }
    elsif ($numeric == $RPL_YOURHOST) {
        $message .= ":Your host is $local{server}, running version $local{version}";
    }
    elsif ($numeric == $RPL_CREATED) {
        $message .= ":This server was created $local{start_date}";
    }
    elsif ($numeric == $RPL_LUSERCLIENT) {
        my ($non_invisible_users, $invisible_users, $servers) = @_;
        $message .= ":There are $non_invisible_users users and $invisible_users invisible on $servers servers";
    }
    elsif ($numeric == $RPL_LUSEROP) {
        my ($operators) = @_;
        $message .= "$operators :operator(s) online";
    }
    elsif ($numeric == $RPL_LUSERUNKNOWN) {
        $message .= "0 :unknown connection(s)";
    }
    elsif ($numeric == $RPL_LUSERCHANNELS) {
        my ($channels) = @_;
        $message .= "$channels :channels formed";
    }
    elsif ($numeric == $RPL_LUSERME) {
        my ($users, $servers) = @_;
        $message .= ":I have $users clients and $servers servers";
    }
    elsif ($numeric == $RPL_LOCALUSERS) {
        my ($users, $record_users) = @_;
        $message .= ":Current Local Users: $users  Max: $record_users";
    }
    elsif ($numeric == $RPL_GLOBALUSERS) {
        my ($users, $record_users) = @_;
        $message .= ":Current Global Users: $users  Max: $record_users";
    }
    elsif ($numeric == $RPL_WHOISUSER) {
        my ($nick, $username, $hostname, $realname) = @_;
        $message .= "$nick $username $hostname * $realname";
    }
    elsif ($numeric == $RPL_WHOISSERVER) {
        my ($nick) = @_;
        $message .= "$nick $local{server} :$local{server_desc}";
    }
    elsif ($numeric == $RPL_ENDOFWHOIS) {
        my ($nick) = @_;
        $message .= "$nick :End of /WHOIS list.";
    }
    elsif ($numeric == $RPL_MOTD) {
        my ($text) = @_;
        $message .= ":- $text";
    }
    elsif ($numeric == $RPL_MOTDSTART) {
        $message .= ":- $local{server} Message of the Day -";
    }
    elsif ($numeric == $RPL_ENDOFMOTD) {
        $message .= ':End of /MOTD command.';
    }
    elsif ($numeric == $ERR_NOSUCHNICK) {
        my ($nick) = @_;
        $message .= "$nick :No such nick";
    }
    elsif ($numeric == $ERR_UNKNOWNCOMMAND) {
        my ($command) = @_;
        $message .= "$command :Unknown command or command not yet implemented";
    }
    elsif ($numeric == $ERR_NOMOTD) {
        $message .= ":MOTD File is missing";
    }
    elsif ($numeric == $ERR_NONICKNAMEGIVEN) {
        $message .= ":No nickname given";
    }
    elsif ($numeric == $ERR_ERRONEUSNICKNAME) {
        my ($nick, $reason) = @_;
        if (!$reason) { $message .= "$nick :Erroneus Nickname" }
        else { $message .= "$nick :Erroneus Nickname: $reason" }
    }
    elsif ($numeric == $ERR_NICKNAMEINUSE) {
        my ($nick) = @_;
        $message .= "$nick :Nickname is already in use.";
    }
    elsif ($numeric == $ERR_NOTREGISTERED) {
        my ($command) = @_;
        $message .= "$command :Register first";
    }
    elsif ($numeric == $ERR_NEEDMOREPARAMS) {
        my ($command) = @_;
        $message .= "$command :Not enough parameters";
    }
    elsif ($numeric == $ERR_ALREADYREGISTERED) {
        $message .= ':You may not reregister';
    }
    else {
        warn "Invalid numeric $numeric used.\n";
        return;
    }

    $message .= "\n";
    $users{$fh}{recv_buf} .= $message;
    $local{sender}->add($fh);
}

###########################################################################
# Subroutines to handle logging on:
###########################################################################

# Does DNS and reverse DNS to find socket's full and real host.
sub look_up_host {
    my ($fh) = @_;
    my $other_end = getpeername($fh);
    my $iaddr = (unpack_sockaddr_in($other_end))[1];
    my $actual_ip = inet_ntoa($iaddr);
    my $claimed_hostname = gethostbyaddr($iaddr, AF_INET);
    my $name_lookup = (gethostbyname($claimed_hostname))[0];
    if ($name_lookup) {
        $users{$fh}{hostname} = $name_lookup;
        print "Client connected: $name_lookup\n";
        1;
    }
    else {
        $users{$fh}{hostname} = $actual_ip;
        print "Client connected: $actual_ip\n";
        return;
    }
}

# Occurs after NICK and USER are received and user is registered.
sub new_logon {
    my ($fh) = @_;
    $local{users}++;
    $local{record_users} = $local{users} > $local{record_users} ? $local{users} : $local{record_users};
    $local{non_invisible_users}++;
    send_user_msg_num($fh, $RPL_WELCOME, $users{$fh}{nick}, $users{$fh}{username}, $users{$fh}{hostname});
    send_user_msg_num($fh, $RPL_YOURHOST);
    send_user_msg_num($fh, $RPL_CREATED);
    serv_lusers($fh);
    serv_motd($fh);
}

###########################################################################
# Subroutines to handle incoming commands:
###########################################################################

# Used to get a command and redirect it to the proper subroutine to handle the command.
# Also returns an error for unknown commands.
sub process_command {
    my ($fh, $args) = @_;
    my $command = (split / /, $args)[0];

    # Regex used for a case insensitive match.
    if    ($command =~ /^user$/i)    { serv_user($fh, $args)    }
    elsif ($command =~ /^nick$/i)    { serv_nick($fh, $args)    }

    elsif (!$users{$fh}{connected})  { send_user_msg_num($fh, $ERR_NOTREGISTERED, $command) }
    # That's to catch anyone trying to send any other commands when they're not registered.

    elsif ($command =~ /^privmsg$/i) { serv_privmsg($fh, $args) }
    elsif ($command =~ /^whois$/i)   { serv_whois($fh, $args)   }
    elsif ($command =~ /^lusers$/i)  { serv_lusers($fh)         }
    elsif ($command =~ /^motd$/i)    { serv_motd($fh)           }
    elsif ($command =~ /^notice$/i)  { serv_privmsg($fh, $args) }
    elsif ($command =~ /^online$/i)  { serv_online($fh)         }

    else {
        $command = lc $command;
        send_user_msg_num($fh, $ERR_UNKNOWNCOMMAND, $command)
    }
}

# Handles the user command. If NICK has already been issued, logs on.
sub serv_user {
    my ($fh, $args) = @_;
    my @user_info = split / /, $args;
    if (!$users{$fh}{connected}) {
        if (@user_info < 5) { send_user_msg_num($fh, $ERR_NEEDMOREPARAMS, 'USER') }
        else {
            $users{$fh}{username} = "~$user_info[1]";
            for (4..$#user_info) {
                if ($_ ne $#user_info) { $users{$fh}{realname} .= "$user_info[$_] " }
                else { $users{$fh}{realname} .= $user_info[$_] }
            }
            if ($users{$fh}{nick_done}) {
                $users{$fh}{connected} = 1;
                delete $users{$fh}{nick_done};
                new_logon($fh);
            }
            else { $users{$fh}{user_done} = 1 }
        }
    }

    else { send_user_msg_num($fh, $ERR_ALREADYREGISTERED) }
}

# Handles the nick command. If NICK has already been issued, logs on.
# Also handles nick changes.
sub serv_nick {
    my ($fh, $args) = @_;
    my $nick = (split / /, $args)[1];
    if (!$nick) {
        send_user_msg_num($fh, $ERR_NONICKNAMEGIVEN);
        return;
    }
    $nick =~ s/^\://;
    my $nick_cs = nick_ison($nick);
    if ($users{$fh}{connected}) {
        if ($nick eq $users{$fh}{nick}) { return }

        elsif ((length($nick) > 30) || ($nick =~ /^[0-9]/) ||
        ($nick =~ /[^a-zA-Z0-9\^_\-\`\\\[\]\{\}\|]/) || ($nick =~ /^\-/)) {
            send_user_msg_num($fh, $ERR_ERRONEUSNICKNAME, $nick);
            return;
        }

        elsif ($nick =~ /^NickServ$/i) {
            send_user_msg_num($fh, $ERR_ERRONEUSNICKNAME, 'NickServ', 'No password stealing. Thanks.');
            return;
        }

        elsif (($nick_cs) && ($fhs{$nick_cs} != $fh)) {
            send_user_msg_num($fh, $ERR_NICKNAMEINUSE, $nick_cs);
            return;
        }

        else {
            # We have to send_user_msg_addr first so that the nick message comes out with the proper address:
            send_user_msg_addr($fh, "NICK :$nick");
            my $old_nick = $users{$fh}{nick};
            delete $fhs{$old_nick};
            $fhs{$nick} = $fh;
            $users{$fh}{nick} = $nick;
        }

    }
    else {
        # a-z A-Z 0-9 ^ _ - ` \ [ ] { } | are the valid characters. Nick can't start with a digit. Ugly regex, I know.

        if ((length($nick) > 30) || ($nick =~ /^[0-9]/) ||
        ($nick =~ /[^a-zA-Z0-9\^_\-\`\\\[\]\{\}\|]/) || ($nick =~ /^\-/)) {
            send_user_msg_num($fh, $ERR_ERRONEUSNICKNAME, $nick);
            return;
        }

        elsif ($nick =~ /^NickServ$/i) {
            send_user_msg_num($fh, $ERR_ERRONEUSNICKNAME, 'NickServ', 'No password stealing. Thanks.');
            return;
        }

        elsif ($nick_cs) {
            send_user_msg_num($fh, $ERR_NICKNAMEINUSE, $nick_cs);
            return;
        }

        else {
            $users{$fh}{nick} = $nick;
            $fhs{$nick} = $fh;
            if ($users{$fh}{user_done}) {
                $users{$fh}{connected} = 1;
                delete $users{$fh}{user_done};
                new_logon($fh);
            }
            else { $users{$fh}{nick_done} = 1 }
        }

    }
}

# Sends off NOTICEs and PRIVMSGs.
sub serv_privmsg {
    my ($fh, $args) = @_;
    my $nick = (split / /, $args)[1];
    my $nick_cs = nick_ison($nick);
    if ($nick_cs) {
        my $receiving_fh = $fhs{$nick_cs};
        my $message = ":$users{$fh}{nick}!$users{$fh}{username}\@$users{$fh}{hostname} $args";
        send_user_msg_raw($receiving_fh, $message);
    }
    else { send_user_msg_num($fh, $ERR_NOSUCHNICK, $nick) }
}

# Returns whois data about a nick.
sub serv_whois {
    my ($fh, $args) = @_;
    my $nick = (split / /, $args)[1];
    my $nick_cs = nick_ison($nick);
    if ($nick_cs) {
        my $fh_of_whoised_nick = $fhs{$nick_cs};
        send_user_msg_num($fh, $RPL_WHOISUSER, $users{$fh_of_whoised_nick}{nick}, $users{$fh_of_whoised_nick}{username}, $users{$fh_of_whoised_nick}{hostname}, $users{$fh_of_whoised_nick}{realname});
        send_user_msg_num($fh, $RPL_WHOISSERVER, $users{$fh_of_whoised_nick}{nick});
        send_user_msg_num($fh, $RPL_ENDOFWHOIS, $users{$fh_of_whoised_nick}{nick});
    }
    else {
        send_user_msg_num($fh, $ERR_NOSUCHNICK, $nick);
        send_user_msg_num($fh, $RPL_ENDOFWHOIS, $nick);
    }
}

# Returns server connection data.
sub serv_lusers {
    my ($fh) = @_;
    calc_global_nums();
    send_user_msg_num($fh, $RPL_LUSERCLIENT, $global{non_invisible_users}, $global{invisible_users}, $global{servers});
    send_user_msg_num($fh, $RPL_LUSEROP, $global{operators});
    send_user_msg_num($fh, $RPL_LUSERUNKNOWN);
    send_user_msg_num($fh, $RPL_LUSERCHANNELS, $global{channels});
    send_user_msg_num($fh, $RPL_LUSERME, $local{users}, $local{servers});
    send_user_msg_num($fh, $RPL_LOCALUSERS, $local{users}, $local{record_users});
    send_user_msg_num($fh, $RPL_GLOBALUSERS, $global{users}, $global{record_users});
}

# Returns the message of the day.

sub serv_motd {
    my ($fh) = @_;
    if (open MOTD, $local{motd_file}) {
        send_user_msg_num($fh, $RPL_MOTDSTART);
        while (<MOTD>) { send_user_msg_num($fh, $RPL_MOTD, $_) }
        close MOTD;
        send_user_msg_num($fh, $RPL_ENDOFMOTD);
    }
    else {
        send_user_msg_num($fh, $ERR_NOMOTD);
        warn "MOTD could not be opened: $!\n";
    }
}

# Used by the message of the day to calculate user sums.
# Since there's no multi-user, the globals are given the same as their local counterparts
sub calc_global_nums {
    $global{users}               = $local{users};
    $global{record_users}        = $local{record_users};
    $global{invisible_users}     = $local{invisible_users};
    $global{non_invisible_users} = $local{non_invisible_users};
#   $global{servers}             = $local{servers}; # Except for this, since the two numbers are always different.
    $global{operators}           = $local{operators};
    $global{channels}            = $local{channels};
}

sub serv_online {
    my ($fh) = @_;
    send_user_msg_serv($fh, 'NOTICE :Current online nicks: ');
    foreach my $nick (sort keys %fhs) {
        send_user_msg_serv($fh, "NOTICE :$nick");
    }
}

###########################################################################
# Other subroutines:
###########################################################################

# Used to disconnect and clear the data of any clients that have disconnected.
sub disconnect_dead_clients {
    # Decrease the user counts based on the number of disconnected clients here.
    $local{users}               -= @clients_to_disconnect;
    $local{non_invisible_users} -= @clients_to_disconnect;

    foreach my $fh (@clients_to_disconnect) {
        print "Client disconnected: $users{$fh}{hostname}\n";
        $local{reader}->remove($fh);
        $local{sender}->remove($fh);
        my $nick = $users{$fh}{nick};
        if ($nick) { delete $fhs{$nick} }
        delete $users{$fh};
        $fh->close; # Oddly enough, if I do this any sooner, it screws up.
    }
    @clients_to_disconnect = ();
}

# Tests to see whether or not a nick is online. Case insensitive search, returns case sensitive value of nick.
sub nick_ison {
    my ($nick) = @_;
    foreach my $nick_check (keys %fhs) { if ($nick =~ /^($nick_check)$/i) { return $nick_check } }
    return;
}

# Supply a date to show when the server was started.
sub get_date {
    my @args = split / /, localtime $^T;
    "@args[0, 1, 2, 4] at $args[3] CST";
}
