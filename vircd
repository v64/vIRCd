#!/usr/bin/perl

use strict;
use warnings;
use v5.6.1;
use IO::Select;
use IO::Socket;
use Socket;

use constant IRCD_VERSION => 'Veachian-0.01';

our %users = ();
our $serv_listen;
our $serv_readable;
our $serv_writable;

init_server();
run_server();
exit;

sub init_server {
    print "Starting ", IRCD_VERSION, ".....\n";

    $serv_listen = IO::Socket::INET->new(LocalPort => 4242,
                                         Listen    => 10,
                                         Proto     => 'tcp',
                                         Reuse     => 1)
    or die "Unable to creating listening socket.\n";

    $serv_readable = IO::Select->new();
    $serv_readable->add($serv_listen);
    $serv_writable = IO::Select->new();
    $serv_writable->add($serv_listen);

    print "Server running.\n";
}

sub run_server {
    while (1) {
        my @ready = IO::Select->select($serv_readable, $serv_writable, undef, 0.1);

        foreach my $write_fh (@{$ready[1]}) {
            my $write = syswrite($write_fh, $message, 1024);
        }


        foreach my $fh (@{$ready[0]}) {
            if ($fh == $serv_listen) {
                my $new = $serv_listen->accept;
                $serv_readable->add($new);
#               $serv_writable->add($new);
                send_to_user_now($fh, ":G42.V64.net NOTICE AUTH :*** Looking up your hostname...");
                my $value;
                ($value, $users{$fh}{hostname}) = look_up_host($new);
                if (!$value) { send_to_user_now($fh, ":G42.V64.net NOTICE AUTH :*** Hostname not resolved. Using IP instead. ($users{$fh}{hostname})");
                else { send_to_user_now($fh, ":G42.V64.net NOTICE AUTH :*** Hostname found: $users{$fh}{hostname}");
                $users{$fh}{connected} = 0;
            }

            else {                
                my $read = sysread($fh, $users{$fh}{recv_buffer}, 1024);
                if ($read) {
                    my @bufs = split(/\n/, $users{$fh}{recv_buffer});
                    foreach (@bufs) {
                        if ((!$users{$fh}{connected}) && (m/^USER/)) {
                            my @user_info = split(' ');
                            if (@user_info < 5) { send_to_user_now($fh, ":G42.V64.net 461 USER :Not enough parameters") }
                            else {
                                $users{$fh}{user_name} = $user_info[1];
                                $users{$fh}{host_name} = $user_info[2];
                                $users{$fh}{server_name} = $user_info[3];
                                $users{$fh}{real_name} = $user_info[4];
                            }
                        }

                    }
                }

#               $serv_readable->remove($fh);
#               $fh->close;
            }
        }
    }
}

sub look_up_host {
    my $socket = shift;
    my $other_end = getpeername($socket);
    my $iaddr = (unpack_sockaddr_in($other_end))[1];
    my $actual_ip = inet_ntoa($iaddr);
    print "IP is $actual_ip.\n";
    my $claimed_hostname = gethostbyaddr($iaddr, AF_INET);
    my $name_lookup = (gethostbyname($claimed_hostname))[0];
    if (!$name_lookup) {
        my (@values) = (0, $actual_ip);
        return @values;
    }
    print "Hostname is $name_lookup.\n";
    my (@values) = (1, $name_lookup);
    @values;
}

sub send_to_user_now {
    my $socket = shift;
    my $message = shift . "\n";
    syswrite($socket, $message, 1024);
}
